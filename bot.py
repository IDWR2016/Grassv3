#!/usr/bin/env python3
# Self-decoding bot using Base64. Run with: python bot.py
import base64, sys, os

_ENC_B64 = """"""

def main():
    try:
        data = base64.b64decode(_ENC_B64)
    except Exception as e:
        print("Decoding error:", e, file=sys.stderr)
        sys.exit(1)
    try:
        src = data.decode("utf-8")
    except UnicodeDecodeError:
        print("Decoded source is not valid UTF-8", file=sys.stderr)
        sys.exit(1)
    glb = {"__name__": "__main__"}
    exec(compile(src, "<decrypted_bot>", "exec"), glb, glb)

if __name__ == "__main__":
    main()
